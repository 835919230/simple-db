package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;

    private OpIterator[] children;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.children = new OpIterator[] {child1, child2};
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int field1 = joinPredicate.getField1();
        String fieldName = children[0].getTupleDesc().getFieldName(field1);
        return fieldName;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int field1 = joinPredicate.getField1();
        String fieldName = children[1].getTupleDesc().getFieldName(field1);
        return fieldName;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        for (OpIterator iterator:children) {
            iterator.open();
        }
    }

    public void close() {
        // some code goes here
        super.close();
        for (OpIterator iterator : children) {
            iterator.close();
        }
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        for (OpIterator iterator : children) {
            iterator.rewind();
        }
    }

//    private Tuple tuple1;
//
//    private Tuple tuple2;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
//    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
//        // some code goes here
//        if (!children[0].hasNext())
//            return null;
//        if (tuple1 == null)
//            tuple1 = children[0].next();
//        if (!children[1].hasNext()) {
//            children[1].rewind();
//            tuple1 = children[0].next();
//        }
//        tuple2 = children[1].next();
//        if (!joinPredicate.filter(tuple1, tuple2)) {
//            return fetchNext();
//        }
//        TupleDesc merge = TupleDesc.merge(tuple1.getTupleDesc(), tuple2.getTupleDesc());
//        Tuple tuple = new Tuple(merge);
//        int numFields1 = tuple1.getTupleDesc().numFields();
//        int numFields2 = tuple2.getTupleDesc().numFields();
//        for (int i = 0; i < numFields1; i++) {
//            tuple.setField(i, tuple1.getField(i));
//        }
//        for (int i = 0; i < numFields2; i++) {
//            tuple.setField(i + numFields1, tuple2.getField(i));
//        }
//        System.out.println(tuple);
//        return tuple;
//    }
    Tuple left;
    Tuple right;
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
//    	TODO could be sped up
        OpIterator outer = children[0];
        OpIterator inner = children[1];
        while(true){
            if(left == null) {
                left = outer.next();
            }
//    		System.out.println("Left::" + left);
            while(inner.hasNext() ) {
                right = inner.next();
//	    		System.out.println("Right : "+right);
                if(joinPredicate.filter(left, right)) {
//	    			System.out.println("I matched: " + left + "::" + right);
                    Tuple tup = new Tuple(this.getTupleDesc());
                    int i,j;
                    for(i =0; i < outer.getTupleDesc().numFields(); i++) {
                        tup.setField(i, left.getField(i));
                    }
                    for(j=0; j < inner.getTupleDesc().numFields(); j++){
                        tup.setField(i+j, right.getField(j));
                    }
	    			System.out.println(tup);
                    return tup;
                }
            }
            if(!outer.hasNext())
                break;
            left = outer.next();
            inner.rewind();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.children = children;
    }

}
